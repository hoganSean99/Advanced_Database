{
  "_from": "node-couchdb",
  "_id": "node-couchdb@1.3.0",
  "_inBundle": false,
  "_integrity": "sha1-oLM10h9HgG1jmYCHio6jRZp065Y=",
  "_location": "/node-couchdb",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-couchdb",
    "fetchSpec": "latest",
    "name": "node-couchdb",
    "raw": "node-couchdb",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-couchdb/-/node-couchdb-1.3.0.tgz",
  "_shasum": "a0b335d21f47806d639980878a8ea3459a74eb96",
  "_shrinkwrap": null,
  "_spec": "node-couchdb",
  "_where": "C:\\Users\\hogan\\Desktop\\ADP_CouchDB",
  "author": {
    "email": "info@staypositive.ru",
    "name": "Dmitry Sorin"
  },
  "bugs": {
    "url": "https://github.com/1999/node-couchdb/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Brad Gardner"
    },
    {
      "name": "Eric Scouten"
    },
    {
      "name": "Pascal Vomhoff"
    },
    {
      "name": "Peter Olson"
    }
  ],
  "dependencies": {
    "request": "^2.79.0"
  },
  "deprecated": false,
  "description": "ES2015-compatible package to interact with CouchDB",
  "devDependencies": {
    "babel-cli": "^6.7.5",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-array-includes": "^2.0.3",
    "babel-plugin-transform-es2015-destructuring": "^6.6.5",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.7.4",
    "babel-plugin-transform-es2015-parameters": "^6.7.0",
    "babel-plugin-transform-es2015-spread": "^6.6.5",
    "babel-plugin-transform-object-rest-spread": "^6.6.5",
    "babel-preset-es2015": "^6.6.0",
    "babel-register": "^6.7.2",
    "chai": "^4.1.1",
    "mocha": "^5.0.0",
    "node-couchdb-plugin-memory": "^0.0.2"
  },
  "engines": {
    "node": ">=4"
  },
  "homepage": "https://github.com/1999/node-couchdb",
  "keywords": [
    "couchdb",
    "nosql"
  ],
  "license": "MIT",
  "main": "./dist/es2015.js",
  "name": "node-couchdb",
  "optionalDependencies": {},
  "readme": "# node-couchdb [![Build Status](https://secure.travis-ci.org/1999/node-couchdb.svg?branch=master)](http://travis-ci.org/1999/node-couchdb) [![Dependency Status](https://david-dm.org/1999/node-couchdb.svg)](https://david-dm.org/1999/node-couchdb) [![devDependency Status](https://david-dm.org/1999/node-couchdb/dev-status.svg)](https://david-dm.org/1999/node-couchdb#info=devDependencies) [![Greenkeeper badge](https://badges.greenkeeper.io/1999/node-couchdb.svg)](https://greenkeeper.io/)\n\n`node-couchdb` package provides an easy way to interact with CouchDB using preferred cache layer:\n\n * [process memory](https://www.npmjs.com/package/node-couchdb-plugin-memory)\n * [memcached](https://www.npmjs.com/package/node-couchdb-plugin-memcached)\n * place for your plugin :)\n\n# Installation\n``` bash\nnpm install node-couchdb --save\n```\n\n# API\n## Constructor\n`node-couchdb` exports constructor, which accepts one object argument with properties `host` (127.0.0.1 by default), `port` (5984 by default), `protocol` (http by default), `cache` (one of plugins, null by default), `auth` (object with properties `{user, pass}`) and `timeout` for all requests (5000 by default). All object fields are optional.\n\n```javascript\nconst NodeCouchDb = require('node-couchdb');\n\n// node-couchdb instance with default options\nconst couch = new NodeCouchDb();\n\n// node-couchdb instance with Memcached\nconst MemcacheNode = require('node-couchdb-plugin-memcached');\nconst couchWithMemcache = new NodeCouchDb({\n    cache: new MemcacheNode\n});\n\n// node-couchdb instance talking to external service\nconst couchExternal = new NodeCouchDb({\n    host: 'couchdb.external.service',\n    protocol: 'https',\n    port: 6984\n});\n\n// not admin party\nconst couchAuth = new NodeCouchDb({\n    auth: {\n        user: 'login',\n        pass: 'secret'\n    }\n});\n```\n\nAll node-couchdb methods return Promise instances which resolve if everything works as expected and reject with Error instance which usually has `code` and `body` fields. See package source and tests for more info.\n\n## Create database\n```javascript\ncouch.createDatabase(dbName).then(() => {...}, err => {\n    // request error occured\n});\n```\n\n## Drop database\n```javascript\ncouch.dropDatabase(dbName).then(() => {...}, err => {\n    // request error occured\n});\n```\n\n## List databases\n```javascript\ncouch.listDatabases().then(dbs => dbs.map(...), err => {\n    // request error occured\n});\n```\n\n## Get document by its id\n```javascript\ncouch.get(\"databaseName\", \"some_document_id\").then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EDOCMISSING if document is missing\n    // ...or err.code=EUNKNOWN if statusCode is unexpected\n});\n```\n\n## Get view results\n```javascript\nconst dbName = \"database\";\nconst startKey = [\"Ann\"];\nconst endKey = [\"George\"];\nconst viewUrl = \"_design/list/_view/by_firstname\";\n\nconst queryOptions = {\n    startKey,\n    endKey\n};\n\ncouch.get(dbName, viewUrl, queryOptions).then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EDOCMISSING if document is missing\n    // ...or err.code=EUNKNOWN if statusCode is unexpected\n});\n```\n\n## Query using Mango (CouchDB 2.x)\n```javascript\nconst dbName = \"database\";\nconst mangoQuery = {\n    selector: {\n        $gte: {firstname: 'Ann'},\n        $lt: {firstname: 'George'}\n    }\n};\nconst parameters = {};\n\ncouch.mango(dbName, mangoQuery, parameters).then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EDOCMISSING if document is missing\n    // ...or err.code=EUNKNOWN if statusCode is unexpected\n});\n```\n\n## Insert a document\n```javascript\ncouch.insert(\"databaseName\", {\n    _id: \"document_id\",\n    field: [\"sample\", \"data\", true]\n}).then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EDOCCONFLICT if document with the same id already exists\n});\n```\n\n## Update a document\n```javascript\n// note that \"doc\" must have both \"_id\" and \"_rev\" fields\ncouch.update(\"databaseName\", {\n    _id: \"document_id\",\n    _rev: \"1-xxx\"\n    field: \"new sample data\",\n    field2: 1\n}).then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EFIELDMISSING if either _id or _rev fields are missing\n});\n```\n\n## Insert an attachment\n```javascript\ncouch.insertAttachment(\"databaseName\", \"document id\", \"attachment name\", \"attachment body\", \"doc revision\").then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EFIELDMISSING if either _id or _rev fields are missing\n});\n```\n\n## Delete an attachment\n```javascript\n// note that \"doc\" must have both \"_id\" and \"_rev\" fields\ncouch.update(\"databaseName\", \"document id\", \"attachment name\", \"doc revision\").then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EFIELDMISSING if either _id or _rev fields are missing\n});\n```\n\n## Use an update function\n```javascript\ncouch.updateFunction(\"databaseName\", \"designDocument\", \"updateFunction\", {optional query string}, \"docid\").then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EFIELDMISSING if either _id or _rev fields are missing\n});\n```\n\n## Delete a document\n```javascript\ncouch.del(\"databaseName\", \"some_document_id\", \"document_revision\").then(({data, headers, status}) => {\n    // data is json response\n    // headers is an object with all response headers\n    // status is statusCode number\n}, err => {\n    // either request error occured\n    // ...or err.code=EDOCMISSING if document does not exist\n    // ...or err.code=EUNKNOWN if response status code is unexpected\n});\n```\n\n## Generate unique identifier(s)\n```javascript\n// get one unique id\ncouch.uniqid().then(ids => ids[0]);\n\n// get N unique ids\ncouch.uniqid(N).then(ids => ids.map(...));\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/1999/node-couchdb.git"
  },
  "scripts": {
    "prepublish": "npm run release:legacy && npm run release:es2015",
    "release:es2015": "babel lib/node-couchdb.js --out-file dist/es2015.js",
    "release:legacy": "babel lib/node-couchdb.js --out-file dist/legacy.js --no-babelrc --presets es2015 --plugins array-includes",
    "test": "mocha --compilers js:babel-register --timeout 10000 --slow 10000 test/"
  },
  "version": "1.3.0"
}
